{
  "address": "0x870526b7973b56163a6997bB7C886F5E4EA53638",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Call",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "mintIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "mintAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "redeemIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "redeemAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "__ERC1155Enumerable_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "call",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPunk",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_is1155",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "is1155",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCNft",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPunk",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "seizeIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "seizeAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "tokensByAccount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "874a0cf191dafd71a0191b3e6171916b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Call\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"mintIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"mintAmounts\",\"type\":\"uint256[]\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"redeemIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"redeemAmounts\",\"type\":\"uint256[]\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"__ERC1155Enumerable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPunk\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_is1155\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPunk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"seizeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"seizeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokensByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"call(address,uint256,bytes)\":{\"params\":{\"data\":\"Encoded data to send\",\"to\":\"Contract address to call\",\"value\":\"ETH value to send, if any\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"tokensByAccount(address)\":{\"details\":\"Returns a list of token IDs held by `account`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Call(address,uint256,bytes)\":{\"notice\":\"Event emitted when arbitrary contract is called\"},\"Mint(address,uint256[],uint256[])\":{\"notice\":\"Event emitted when cNFTs are minted\"},\"Redeem(address,uint256[],uint256[])\":{\"notice\":\"Event emitted when tokens are redeemed\"}},\"kind\":\"user\",\"methods\":{\"call(address,uint256,bytes)\":{\"notice\":\"Allows the admin to call arbitrary contracts, as long as the underlying balance is unchanged.This allows the admin to retrieve and distribute NFT airdrops that would otherwise be locked up in this contract.\"},\"comptroller()\":{\"notice\":\"The address of the CNft's Comptroller.\"},\"is1155()\":{\"notice\":\"Whether `underlying` represents an ERC-1155.\"},\"isCNft()\":{\"notice\":\"Indicator that this is a CNft contract (for inspection)\"},\"isPunk()\":{\"notice\":\"Whether `underlying` represents a CryptoPunk.\"},\"mint(uint256[],uint256[])\":{\"notice\":\"If underlying is not ERC1155, amounts must be all 1s.\"},\"redeem(uint256[],uint256[])\":{\"notice\":\"If underlying is not ERC1155, amounts must be all 1s.\"},\"totalBalance(address)\":{\"notice\":\"Mapping from user to number of tokens.\"},\"underlying()\":{\"notice\":\"The underlying NFT contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CNft.sol\":\"CNft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x00a36a453484b7145a0d4a0c64daea248a7e806e6be4d7bbae1032a328777c82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CNft.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CNftInterface080.sol\\\";\\nimport \\\"./ComptrollerInterface080.sol\\\";\\nimport \\\"./ERC1155Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract CNft is CNftInterface, ERC1155Enumerable, IERC1155Receiver, IERC721Receiver, ReentrancyGuardUpgradeable, OwnableUpgradeable {\\n    function initialize (\\n        string memory _uri,\\n        address _underlying,\\n        bool _isPunk,\\n        bool _is1155,\\n        address _comptroller\\n    ) public initializer {\\n        require(_underlying != address(0), \\\"CNFT: Asset should not be address(0)\\\");\\n        require(ComptrollerInterface(_comptroller).isComptroller(), \\\"_comptroller is not a Comptroller contract\\\");\\n        __ERC1155Enumerable_init(_uri);\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n        underlying = _underlying;\\n        isPunk = _isPunk;\\n        is1155 = _is1155;\\n        comptroller = _comptroller;\\n    }\\n\\n    /// @notice If underlying is not ERC1155, amounts must be all 1s.\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external nonReentrant returns (uint256) {\\n        require(tokenIds.length == amounts.length, \\\"CNFT: id/amounts length mismatch\\\");\\n\\n        // Check if the Comptroller allows minting.\\n        // We set mintAmount to 0 because it is not used.\\n        uint mintAllowedResult = ComptrollerInterface(comptroller).mintAllowed(address(this), msg.sender, 0);\\n        require(mintAllowedResult == 0, \\\"CNFT: Mint is not allowed\\\");\\n\\n        // Receive NFTs.\\n        uint256 length = tokenIds.length;\\n        uint256 totalAmount = 0;\\n        for (uint256 i; i < length; ++i) {\\n            if (!is1155) {\\n                require(amounts[i] == 1, \\\"CNFT: Amounts must be all 1s for non-ERC1155s.\\\");\\n            }\\n            totalAmount += amounts[i];\\n        }\\n        totalBalance[msg.sender] += totalAmount;\\n        if (is1155) {\\n            IERC1155(underlying).safeBatchTransferFrom(msg.sender, address(this), tokenIds, amounts, \\\"\\\");\\n        } else {\\n            if (isPunk) {\\n                // Adapted from https://github.com/NFTX-project/nftx-protocol-v2/blob/master/contracts/solidity/NFTXVaultUpgradeable.sol#L501\\n                for (uint256 i; i < length; ++i) {\\n                    bytes memory punkIndexToAddress = abi.encodeWithSignature(\\\"punkIndexToAddress(uint256)\\\", tokenIds[i]);\\n                    (bool checkSuccess, bytes memory result) = underlying.staticcall(punkIndexToAddress);\\n                    (address nftOwner) = abi.decode(result, (address));\\n                    require(checkSuccess && nftOwner == msg.sender, \\\"Not the NFT owner\\\");\\n                    bytes memory data = abi.encodeWithSignature(\\\"buyPunk(uint256)\\\", tokenIds[i]);\\n                    (bool buyPunkSuccess, ) = underlying.call(data);\\n                    require(buyPunkSuccess, \\\"CNFT: Calling buyPunk was unsuccessful\\\");\\n                }\\n            } else {\\n                for (uint256 i; i < length; ++i) {\\n                    IERC721(underlying).safeTransferFrom(msg.sender, address(this), tokenIds[i], \\\"\\\");\\n                }\\n            }\\n        }\\n        _mintBatch(msg.sender, tokenIds, amounts, \\\"\\\");\\n        emit Mint(msg.sender, tokenIds, amounts);\\n\\n        return length;\\n    }\\n\\n    // Adapted from the `seize` function in CToken.\\n    function seize(address liquidator, address borrower, uint256[] calldata seizeIds, uint256[] calldata seizeAmounts) external nonReentrant override {\\n        require(seizeIds.length == seizeAmounts.length, \\\"CNFT: id/amounts length mismatch\\\");\\n\\n        // Check if the Comptroller allows seizing.\\n        // We set seizeAmount to 0 because it is not used.\\n        uint siezeAllowedResult = ComptrollerInterface(comptroller).seizeAllowed(address(this), msg.sender, liquidator, borrower, 0);\\n        require(siezeAllowedResult == 0, \\\"CNFT: Seize is not allowed\\\");\\n\\n        // Fail if borrower == liquidator.\\n        require(borrower != liquidator, \\\"CNFT: Liquidator cannot be borrower\\\");\\n\\n        // Transfer cNFT.\\n        uint256 length = seizeIds.length;\\n        uint256 totalAmount = 0;\\n        for (uint256 i; i < length; ++i) {\\n            if (!is1155) {\\n                require(seizeAmounts[i] == 1, \\\"CNFT: Amounts must be all 1s for non-ERC1155s.\\\");\\n            }\\n            totalAmount += seizeAmounts[i];\\n        }\\n        totalBalance[liquidator] += totalAmount;\\n        totalBalance[borrower] -= totalAmount;\\n        // We call the internal function instad of the public one because in liquidation, we\\n        // forcibly seize the borrower's cNFTs without approval.\\n        _safeBatchTransferFrom(borrower, liquidator, seizeIds, seizeAmounts, \\\"\\\");\\n    }\\n\\n    /// @notice If underlying is not ERC1155, amounts must be all 1s.\\n    function redeem(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 */\\n    ) external nonReentrant {\\n        require(tokenIds.length == amounts.length, \\\"CNFT: id/amounts length mismatch\\\");\\n\\n        uint256 length = tokenIds.length;\\n        uint256 totalAmount = 0;\\n\\n        // Check for ownership.\\n        for (uint256 i; i < length; ++i) {\\n            if (!is1155) {\\n                require(amounts[i] == 1, \\\"CNFT: Amounts must be all 1s for non-ERC1155s.\\\");\\n            }\\n            totalAmount += amounts[i];\\n            require(balanceOf(msg.sender, tokenIds[i]) >= amounts[i], \\\"CNFT: Not enough NFTs to redeem\\\");\\n        }\\n\\n        // Check if we can redeem.\\n        uint redeemAllowedResult = ComptrollerInterface(comptroller).redeemAllowed(address(this), msg.sender, totalAmount);\\n        require(redeemAllowedResult == 0, \\\"CNFT: Redeem is not allowed\\\");\\n\\n        totalBalance[msg.sender] -= totalAmount;\\n\\n        // Burn CNfts.\\n        _burnBatch(msg.sender, tokenIds, amounts);\\n\\n        // Transfer underlying to `to`.\\n        if (is1155) {\\n            IERC1155(underlying).safeBatchTransferFrom(address(this), msg.sender, tokenIds, amounts, \\\"\\\");\\n        } else {\\n            if (isPunk) {\\n                // Adapted from https://github.com/NFTX-project/nftx-protocol-v2/blob/master/contracts/solidity/NFTXVaultUpgradeable.sol#L483\\n                for (uint256 i; i < length; ++i) {\\n                    bytes memory data = abi.encodeWithSignature(\\\"transferPunk(address,uint256)\\\", msg.sender, tokenIds[i]);\\n                    (bool transferPunkSuccess, ) = underlying.call(data);\\n                    require(transferPunkSuccess, \\\"CNFT: Calling transferPunk was unsuccessful\\\");\\n                }\\n            } else {\\n                for (uint256 i; i < length; ++i) {\\n                    IERC721(underlying).safeTransferFrom(address(this), msg.sender, tokenIds[i], \\\"\\\");\\n                }\\n            }\\n        }\\n\\n        emit Redeem(msg.sender, tokenIds, amounts);\\n    }\\n\\n    /// @dev To avoid \\\"stack too deep\\\" error.\\n    struct BatchTransferLocalVars {\\n        uint256 length;\\n        uint256 totalAmount;\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual nonReentrant override {\\n        BatchTransferLocalVars memory vars;\\n        vars.length = ids.length;\\n        vars.totalAmount = 0;\\n        for (uint256 i; i < vars.length; ++i) {\\n            vars.totalAmount += amounts[i];\\n        }\\n\\n        // Check if we can transfer.\\n        uint transferAllowedResult = ComptrollerInterface(comptroller).transferAllowed(address(this), from, to, vars.totalAmount);\\n        require(transferAllowedResult == 0, \\\"CNFT: Redeem is not allowed\\\");\\n\\n        // Transfer cNFT.\\n        totalBalance[to] += vars.totalAmount;\\n        totalBalance[from] -= vars.totalAmount;\\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n        ) public virtual override {\\n            // Unused.\\n            from;\\n            to;\\n            id;\\n            amount;\\n            data;\\n\\n            revert(\\\"CNFT: Use safeBatchTransferFrom instead\\\");\\n    }\\n\\n    modifier validReceive(address operator) {\\n        require(msg.sender == underlying, \\\"CNFT: This contract can only receive the underlying NFT\\\");\\n        require(operator == address(this), \\\"CNFT: Only the CNFT contract can be the operator\\\");\\n        _;\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) public virtual override validReceive(operator) returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) public virtual override validReceive(operator) returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) public virtual override validReceive(operator) returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Upgradeable, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function executeCall(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        assembly {\\n            success := call(\\n                txGas,\\n                to,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows the admin to call arbitrary contracts, as long as the underlying balance is unchanged.\\n     * @notice This allows the admin to retrieve and distribute NFT airdrops that would otherwise be locked up in this contract.\\n     * @param to Contract address to call\\n     * @param value ETH value to send, if any\\n     * @param data Encoded data to send\\n     */\\n    function call(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external payable nonReentrant onlyOwner returns (bool success) {\\n        require(to != underlying, \\\"CNFT: Cannot make an arbitrary call to underlying NFT\\\");\\n        success = executeCall(to, value, data, gasleft());\\n        emit Call(to, value, data);\\n    }\\n}\\n\",\"keccak256\":\"0x379aecaa1c5a3f8c8ee66245aa539d5808b3354cc828e130ce0da9f9d6445a31\",\"license\":\"UNLICENSED\"},\"contracts/CNftInterface080.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CNftStorage.sol\\\";\\n\\n/// @dev Keep in sync with CNftInterface.sol.\\nabstract contract CNftInterface is CNftStorage {\\n    /**\\n     * @notice Event emitted when cNFTs are minted\\n     */\\n    event Mint(address minter, uint[] mintIds, uint[] mintAmounts);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint[] redeemIds, uint[] redeemAmounts);\\n\\n    /**\\n     * @notice Event emitted when arbitrary contract is called\\n     */\\n    event Call(address to, uint256 value, bytes data);\\n\\n    function seize(address liquidator, address borrower, uint256[] calldata seizeIds, uint256[] calldata seizeAmounts) external virtual;\\n}\\n\",\"keccak256\":\"0x3646ac145cc94eb436f1b4735b9239e1e1907f3a07c5548bddd04d77df55b53b\",\"license\":\"MIT\"},\"contracts/CNftStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.16 <0.9.0;\\n\\ncontract CNftStorage {\\n    /**\\n     * @notice Indicator that this is a CNft contract (for inspection)\\n     */\\n    bool public constant isCNft = true;\\n\\n    /**\\n     * @notice The address of the CNft's Comptroller.\\n     */\\n    address public comptroller;\\n\\n    /**\\n     * @notice The underlying NFT contract.\\n     */\\n    address public underlying;\\n\\n    /**\\n     * @notice Whether `underlying` represents a CryptoPunk.\\n     */\\n    bool public isPunk;\\n\\n    /**\\n     * @notice Whether `underlying` represents an ERC-1155.\\n     */\\n    bool public is1155;\\n\\n    /**\\n     * @notice Mapping from user to number of tokens.\\n     */\\n    mapping(address => uint256) public totalBalance;\\n}\\n\",\"keccak256\":\"0x7436232fae690d5238a1210510ee2537c27b53fa5dc86335c312cb29f912e25b\",\"license\":\"UNLICENSED\"},\"contracts/ComptrollerInterface080.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev Keep in sync with ComptrollerInterface.sol.\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external virtual returns (uint[] memory);\\n    function exitMarket(address cToken) external virtual returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external virtual returns (uint);\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external virtual returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external virtual;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external virtual returns (uint);\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external virtual returns (uint);\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external virtual returns (uint);\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external virtual returns (uint);\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external virtual returns (uint);\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view virtual returns (uint, uint);\\n\\n    function liquidateCalculateSeizeNfts(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view virtual returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xa48bb3046f8ed674745a366ddb589cc2040ba593b8874ec4bc3f88d0ed630a42\",\"license\":\"MIT\"},\"contracts/ERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"./EnumerableUintSet.sol\\\";\\n\\ninterface IERC1155Enumerable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a list of token IDs held by `account`.\\n     */\\n    function tokensByAccount(address account) external view returns (uint256[] memory);\\n}\\n\\nabstract contract ERC1155Enumerable is ERC1155Upgradeable, IERC1155Enumerable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    uint256 public totalSupply;\\n    mapping(address => EnumerableSet.UintSet) _tokensByAccount;\\n\\n    function __ERC1155Enumerable_init(string memory uri_) public onlyInitializing {\\n        __ERC1155_init(uri_);\\n    }\\n\\n    function tokensByAccount(address account) external view returns (uint256[] memory) {\\n        return _tokensByAccount[account]._values;\\n    }\\n\\n    // Logic adapted from https://github.com/solidstate-network/solidstate-solidity/blob/master/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n        if (from == to) {\\n            return;\\n        }\\n\\n        EnumerableSet.UintSet storage fromTokens = _tokensByAccount[from];\\n        EnumerableSet.UintSet storage toTokens = _tokensByAccount[to];\\n\\n        for (uint256 i; i < ids.length; ++i) {\\n            uint256 amount = amounts[i];\\n            if (amount == 0) {\\n                continue;\\n            }\\n\\n            uint256 id = ids[i];\\n            if (from == address(0)) {\\n                totalSupply += amount;\\n            } else if (balanceOf(from, id) == amount) {\\n                fromTokens.remove(id);\\n            }\\n\\n            if (to == address(0)) {\\n                totalSupply -= amount;\\n            } else if (balanceOf(to, id) == 0) {\\n                toTokens.add(id);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1bf53d7947120e8ac0521f42f115388751331e6e66decd088d6e0acf0c5ae40c\",\"license\":\"MIT\"},\"contracts/EnumerableUintSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.UintSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.UintSet private mySet;\\n * }\\n * ```\\n *\\n */\\nlibrary EnumerableSet {\\n    struct UintSet {\\n        // Storage of set values\\n        uint256[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(uint256 => uint256) _indexes;\\n    }\\n\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                uint256 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        return set._values;\\n    }\\n}\\n\",\"keccak256\":\"0x867ee3ad1611c1308ea51047be1d8d40a368bfc0f287afd50076d842d20af607\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613d16806100206000396000f3fe6080604052600436106101b65760003560e01c80636f307dc3116100ec578063bc197c811161008a578063e985e9c511610064578063e985e9c51461050b578063f23a6e6114610554578063f242432a14610574578063f2fde38b1461059457600080fd5b8063bc197c81146104ab578063cce36ecd146104cb578063d71dfb99146104eb57600080fd5b80638da5cb5b116100c65780638da5cb5b146104385780639380920814610456578063a22cb46514610476578063aa80b6cc1461049657600080fd5b80636f307dc3146103e3578063715018a61461040357806385bff2e71461041857600080fd5b80632eb2c2d6116101595780635fe3b567116101335780635fe3b5671461034a5780636a11a3d8146103825780636dbf2fa0146103a35780636eacd398146103b657600080fd5b80632eb2c2d6146102dd5780633d5d190c146102fd5780634e1273f41461031d57600080fd5b80630e89341c116101955780630e89341c1461023f578063150b7a021461026c57806318160ddd146102a55780632ca51e22146102bb57600080fd5b8062fdd58e146101bb57806301ffc9a7146101ee57806306f26dc21461021e575b600080fd5b3480156101c757600080fd5b506101db6101d6366004612efd565b6105b4565b6040519081526020015b60405180910390f35b3480156101fa57600080fd5b5061020e610209366004612f3f565b610650565b60405190151581526020016101e5565b34801561022a57600080fd5b5060015461020e90600160a81b900460ff1681565b34801561024b57600080fd5b5061025f61025a366004612f63565b610690565b6040516101e59190612fd8565b34801561027857600080fd5b5061028c610287366004613033565b610724565b6040516001600160e01b031990911681526020016101e5565b3480156102b157600080fd5b506101db609a5481565b3480156102c757600080fd5b506102db6102d63660046130e9565b61078e565b005b3480156102e957600080fd5b506102db6102f8366004613154565b610d4c565b34801561030957600080fd5b506101db6103183660046130e9565b610fe4565b34801561032957600080fd5b5061033d6103383660046132e8565b611647565b6040516101e591906133ef565b34801561035657600080fd5b5060005461036a906001600160a01b031681565b6040516001600160a01b0390911681526020016101e5565b34801561038e57600080fd5b5060015461020e90600160a01b900460ff1681565b61020e6103b1366004613402565b611770565b3480156103c257600080fd5b506101db6103d1366004613451565b60026020526000908152604090205481565b3480156103ef57600080fd5b5060015461036a906001600160a01b031681565b34801561040f57600080fd5b506102db6118cd565b34801561042457600080fd5b5061033d610433366004613451565b611903565b34801561044457600080fd5b5060ce546001600160a01b031661036a565b34801561046257600080fd5b506102db61047136600461346e565b61196e565b34801561048257600080fd5b506102db610491366004613510565b611c84565b3480156104a257600080fd5b5061020e600181565b3480156104b757600080fd5b5061028c6104c6366004613154565b611c93565b3480156104d757600080fd5b506102db6104e63660046135bc565b611d00565b3480156104f757600080fd5b506102db610506366004613645565b611f5c565b34801561051757600080fd5b5061020e610526366004613681565b6001600160a01b03918216600090815260696020908152604080832093909416825291909152205460ff1690565b34801561056057600080fd5b5061028c61056f3660046136af565b611f8f565b34801561058057600080fd5b506102db61058f3660046136af565b611ffa565b3480156105a057600080fd5b506102db6105af366004613451565b612052565b60006001600160a01b0383166106255760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526068602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216630271189760e51b148061068157506001600160e01b03198216630a85bd0160e11b145b8061064a575061064a826120ea565b6060606a805461069f90613718565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb90613718565b80156107185780601f106106ed57610100808354040283529160200191610718565b820191906000526020600020905b8154815290600101906020018083116106fb57829003601f168201915b50505050509050919050565b60015460009086906001600160a01b031633146107535760405162461bcd60e51b815260040161061c90613753565b6001600160a01b038116301461077b5760405162461bcd60e51b815260040161061c906137b0565b50630a85bd0160e11b9695505050505050565b6002609c5414156107b15760405162461bcd60e51b815260040161061c90613800565b6002609c558281146107d55760405162461bcd60e51b815260040161061c90613837565b826000805b828110156108ea57600154600160a81b900460ff1661082b578484828181106108055761080561386c565b9050602002013560011461082b5760405162461bcd60e51b815260040161061c90613882565b84848281811061083d5761083d61386c565b905060200201358261084f91906138e6565b91508484828181106108635761086361386c565b9050602002013561088c338989858181106108805761088061386c565b905060200201356105b4565b10156108da5760405162461bcd60e51b815260206004820152601f60248201527f434e46543a204e6f7420656e6f756768204e46547320746f2072656465656d00604482015260640161061c565b6108e3816138fe565b90506107da565b506000805460405163eabe7d9160e01b8152306004820152336024820152604481018490526001600160a01b039091169063eabe7d9190606401602060405180830381600087803b15801561093e57600080fd5b505af1158015610952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109769190613919565b905080156109c65760405162461bcd60e51b815260206004820152601b60248201527f434e46543a2052656465656d206973206e6f7420616c6c6f7765640000000000604482015260640161061c565b33600090815260026020526040812080548492906109e5908490613932565b92505081905550610a5a3388888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525061213a92505050565b600154600160a81b900460ff1615610add57600154604051631759616b60e11b81526001600160a01b0390911690632eb2c2d690610aa690309033908c908c908c908c9060040161397f565b600060405180830381600087803b158015610ac057600080fd5b505af1158015610ad4573d6000803e3d6000fd5b50505050610cff565b600154600160a01b900460ff1615610c3f5760005b83811015610c3957600033898984818110610b0f57610b0f61386c565b6040516001600160a01b039094166024850152602002919091013560448301525060640160408051601f198184030181529181526020820180516001600160e01b03166322dca8bb60e21b17905260015490519192506000916001600160a01b0390911690610b7f9084906139de565b6000604051808303816000865af19150503d8060008114610bbc576040519150601f19603f3d011682016040523d82523d6000602084013e610bc1565b606091505b5050905080610c265760405162461bcd60e51b815260206004820152602b60248201527f434e46543a2043616c6c696e67207472616e7366657250756e6b20776173207560448201526a1b9cdd58d8d95cdcd99d5b60aa1b606482015260840161061c565b505080610c32906138fe565b9050610af2565b50610cff565b60005b83811015610cfd576001546001600160a01b031663b88d4fde30338b8b86818110610c6f57610c6f61386c565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152608060648201526000608482015260a401600060405180830381600087803b158015610cd457600080fd5b505af1158015610ce8573d6000803e3d6000fd5b5050505080610cf6906138fe565b9050610c42565b505b7fd63285f33fab7fc260b1b9e7ce1abbf3fc8906df5a271e6ebd3062bdca7bb29e3388888888604051610d369594939291906139fa565b60405180910390a150506001609c555050505050565b6002609c541415610d6f5760405162461bcd60e51b815260040161061c90613800565b6002609c55604080518082019091526000602082018190528682525b8151811015610dd157858582818110610da657610da661386c565b9050602002013582602001818151610dbe91906138e6565b905250610dca816138fe565b9050610d8b565b506000805460208301516040516317b9b84b60e31b81523060048201526001600160a01b038d811660248301528c81166044830152606482019290925291169063bdcdc25890608401602060405180830381600087803b158015610e3457600080fd5b505af1158015610e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6c9190613919565b90508015610ebc5760405162461bcd60e51b815260206004820152601b60248201527f434e46543a2052656465656d206973206e6f7420616c6c6f7765640000000000604482015260640161061c565b8160200151600260008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610ef591906138e6565b90915550506020808301516001600160a01b038c166000908152600290925260408220805491929091610f29908490613932565b92505081905550610fd38a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c91829185019084908082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a908190840183828082843760009201919091525061234392505050565b50506001609c555050505050505050565b60006002609c5414156110095760405162461bcd60e51b815260040161061c90613800565b6002609c5583821461102d5760405162461bcd60e51b815260040161061c90613837565b60008054604051634ef4c3e160e01b8152306004820152336024820152604481018390526001600160a01b0390911690634ef4c3e190606401602060405180830381600087803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b89190613919565b905080156111085760405162461bcd60e51b815260206004820152601960248201527f434e46543a204d696e74206973206e6f7420616c6c6f77656400000000000000604482015260640161061c565b846000805b8281101561119457600154600160a81b900460ff1661115e578686828181106111385761113861386c565b9050602002013560011461115e5760405162461bcd60e51b815260040161061c90613882565b8686828181106111705761117061386c565b905060200201358261118291906138e6565b915061118d816138fe565b905061110d565b5033600090815260026020526040812080548392906111b49084906138e6565b9091555050600154600160a81b900460ff161561123c57600154604051631759616b60e11b81526001600160a01b0390911690632eb2c2d69061120590339030908d908d908d908d9060040161397f565b600060405180830381600087803b15801561121f57600080fd5b505af1158015611233573d6000803e3d6000fd5b5050505061157c565b600154600160a01b900460ff16156114bc5760005b828110156114b657600089898381811061126d5761126d61386c565b9050602002013560405160240161128691815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316630b02f02d60e31b179052600154905191925060009182916001600160a01b0316906112d29085906139de565b600060405180830381855afa9150503d806000811461130d576040519150601f19603f3d011682016040523d82523d6000602084013e611312565b606091505b509150915060008180602001905181019061132d9190613a3e565b905082801561134457506001600160a01b03811633145b6113845760405162461bcd60e51b81526020600482015260116024820152702737ba103a34329027232a1037bbb732b960791b604482015260640161061c565b60008d8d878181106113985761139861386c565b905060200201356040516024016113b191815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663104c9fd360e31b17905260015490519192506000916001600160a01b03909116906113fd9084906139de565b6000604051808303816000865af19150503d806000811461143a576040519150601f19603f3d011682016040523d82523d6000602084013e61143f565b606091505b505090508061149f5760405162461bcd60e51b815260206004820152602660248201527f434e46543a2043616c6c696e672062757950756e6b2077617320756e73756363604482015265195cdcd99d5b60d21b606482015260840161061c565b505050505050806114af906138fe565b9050611251565b5061157c565b60005b8281101561157a576001546001600160a01b031663b88d4fde33308c8c868181106114ec576114ec61386c565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152608060648201526000608482015260a401600060405180830381600087803b15801561155157600080fd5b505af1158015611565573d6000803e3d6000fd5b5050505080611573906138fe565b90506114bf565b505b6115f83389898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920182905250604080516020810190915290815292506123da915050565b7f0329a7c1652297b926cc497fd75d078847dbaa7a5a782d651dba3fdf3e8b38da338989898960405161162f9594939291906139fa565b60405180910390a1506001609c559695505050505050565b606081518351146116ac5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161061c565b600083516001600160401b038111156116c7576116c7613212565b6040519080825280602002602001820160405280156116f0578160200160208202803683370190505b50905060005b84518110156117685761173b8582815181106117145761171461386c565b602002602001015185838151811061172e5761172e61386c565b60200260200101516105b4565b82828151811061174d5761174d61386c565b6020908102919091010152611761816138fe565b90506116f6565b509392505050565b60006002609c5414156117955760405162461bcd60e51b815260040161061c90613800565b6002609c5560ce546001600160a01b031633146117c45760405162461bcd60e51b815260040161061c90613a5b565b6001546001600160a01b03868116911614156118405760405162461bcd60e51b815260206004820152603560248201527f434e46543a2043616e6e6f74206d616b6520616e206172626974726172792063604482015274185b1b081d1bc81d5b99195c9b1e5a5b99c8139195605a1b606482015260840161061c565b611881858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505a61256f565b90507f58920bab8ebe20f458895b68243189a021c51741421c3d98eff715b8e5afe1fa858585856040516118b89493929190613a90565b60405180910390a16001609c55949350505050565b60ce546001600160a01b031633146118f75760405162461bcd60e51b815260040161061c90613a5b565b6119016000612587565b565b6001600160a01b0381166000908152609b602090815260409182902080548351818402810184019094528084526060939283018282801561071857602002820191906000526020600020905b81548152602001906001019080831161194f5750505050509050919050565b6002609c5414156119915760405162461bcd60e51b815260040161061c90613800565b6002609c558281146119b55760405162461bcd60e51b815260040161061c90613837565b6000805460405163d02f735160e01b81523060048201523360248201526001600160a01b0389811660448301528881166064830152608482018490529091169063d02f73519060a401602060405180830381600087803b158015611a1857600080fd5b505af1158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a509190613919565b90508015611aa05760405162461bcd60e51b815260206004820152601a60248201527f434e46543a205365697a65206973206e6f7420616c6c6f776564000000000000604482015260640161061c565b866001600160a01b0316866001600160a01b03161415611b0e5760405162461bcd60e51b815260206004820152602360248201527f434e46543a204c697175696461746f722063616e6e6f7420626520626f72726f6044820152623bb2b960e91b606482015260840161061c565b836000805b82811015611b9a57600154600160a81b900460ff16611b6457858582818110611b3e57611b3e61386c565b90506020020135600114611b645760405162461bcd60e51b815260040161061c90613882565b858582818110611b7657611b7661386c565b9050602002013582611b8891906138e6565b9150611b93816138fe565b9050611b13565b506001600160a01b03891660009081526002602052604081208054839290611bc39084906138e6565b90915550506001600160a01b03881660009081526002602052604081208054839290611bf0908490613932565b92505081905550611c74888a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920182905250604080516020810190915290815292506125d9915050565b50506001609c5550505050505050565b611c8f3383836127ff565b5050565b60015460009089906001600160a01b03163314611cc25760405162461bcd60e51b815260040161061c90613753565b6001600160a01b0381163014611cea5760405162461bcd60e51b815260040161061c906137b0565b5063bc197c8160e01b9998505050505050505050565b600354610100900460ff16611d1b5760035460ff1615611d1f565b303b155b611d825760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161061c565b600354610100900460ff16158015611da4576003805461ffff19166101011790555b6001600160a01b038516611e065760405162461bcd60e51b8152602060048201526024808201527f434e46543a2041737365742073686f756c64206e6f74206265206164647265736044820152637328302960e01b606482015260840161061c565b816001600160a01b0316627e3dd26040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3e57600080fd5b505afa158015611e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e769190613ad8565b611ed55760405162461bcd60e51b815260206004820152602a60248201527f5f636f6d7074726f6c6c6572206973206e6f74206120436f6d7074726f6c6c656044820152691c8818dbdb9d1c9858dd60b21b606482015260840161061c565b611ede86611f5c565b611ee66128e0565b611eee61290f565b600180546001600160a01b038781166001600160a81b031990921691909117600160a01b871515021760ff60a81b1916600160a81b8615150217909155600080546001600160a01b0319169184169190911790558015611f54576003805461ff00191690555b505050505050565b600354610100900460ff16611f835760405162461bcd60e51b815260040161061c90613af5565b611f8c8161293e565b50565b60015460009087906001600160a01b03163314611fbe5760405162461bcd60e51b815260040161061c90613753565b6001600160a01b0381163014611fe65760405162461bcd60e51b815260040161061c906137b0565b5063f23a6e6160e01b979650505050505050565b60405162461bcd60e51b815260206004820152602760248201527f434e46543a20557365207361666542617463685472616e7366657246726f6d206044820152661a5b9cdd19585960ca1b606482015260840161061c565b60ce546001600160a01b0316331461207c5760405162461bcd60e51b815260040161061c90613a5b565b6001600160a01b0381166120e15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161061c565b611f8c81612587565b60006001600160e01b03198216636cdb3d1360e11b148061211b57506001600160e01b031982166303a24d0760e21b145b8061064a57506301ffc9a760e01b6001600160e01b031983161461064a565b6001600160a01b03831661219c5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161061c565b80518251146121bd5760405162461bcd60e51b815260040161061c90613b40565b60003390506121e08185600086866040518060200160405280600081525061296e565b60005b83518110156122e45760008482815181106122005761220061386c565b60200260200101519050600084838151811061221e5761221e61386c565b60209081029190910181015160008481526068835260408082206001600160a01b038c1683529093529190912054909150818110156122ab5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161061c565b60009283526068602090815260408085206001600160a01b038b16865290915290922091039055806122dc816138fe565b9150506121e3565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612335929190613b88565b60405180910390a450505050565b6001600160a01b03851633148061235f575061235f8533610526565b6123c65760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161061c565b6123d385858585856125d9565b5050505050565b6001600160a01b03841661243a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161061c565b815183511461245b5760405162461bcd60e51b815260040161061c90613b40565b3361246b8160008787878761296e565b60005b8451811015612507578381815181106124895761248961386c565b6020026020010151606860008784815181106124a7576124a761386c565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546124ef91906138e6565b909155508190506124ff816138fe565b91505061246e565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612558929190613b88565b60405180910390a46123d381600087878787612abc565b6000806000845160208601878987f195945050505050565b60ce80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b81518351146125fa5760405162461bcd60e51b815260040161061c90613b40565b6001600160a01b03841661265e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161061c565b3361266d81878787878761296e565b60005b845181101561279957600085828151811061268d5761268d61386c565b6020026020010151905060008583815181106126ab576126ab61386c565b60209081029190910181015160008481526068835260408082206001600160a01b038e16835290935291909120549091508181101561273f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161061c565b60008381526068602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061277e9084906138e6565b9250508190555050505080612792906138fe565b9050612670565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516127e9929190613b88565b60405180910390a4611f54818787878787612abc565b816001600160a01b0316836001600160a01b031614156128735760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161061c565b6001600160a01b03838116600081815260696020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600354610100900460ff166129075760405162461bcd60e51b815260040161061c90613af5565b611901612c71565b600354610100900460ff166129365760405162461bcd60e51b815260040161061c90613af5565b611901612c9f565b600354610100900460ff166129655760405162461bcd60e51b815260040161061c90613af5565b611f8c81612ccf565b836001600160a01b0316856001600160a01b0316141561298d57611f54565b6001600160a01b038086166000908152609b602052604080822092871682528120905b8551811015612ab15760008582815181106129cd576129cd61386c565b6020026020010151905080600014156129e65750612aa1565b60008783815181106129fa576129fa61386c565b6020026020010151905060006001600160a01b03168a6001600160a01b03161415612a3c5781609a6000828254612a3191906138e6565b90915550612a599050565b81612a478b836105b4565b1415612a5957612a578582612cff565b505b6001600160a01b038916612a845781609a6000828254612a799190613932565b90915550612a9e9050565b612a8e89826105b4565b612a9e57612a9c8482612df2565b505b50505b612aaa816138fe565b90506129b0565b505050505050505050565b6001600160a01b0384163b15611f545760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612b009089908990889088908890600401613bb6565b602060405180830381600087803b158015612b1a57600080fd5b505af1925050508015612b4a575060408051601f3d908101601f19168201909252612b4791810190613c08565b60015b612bf757612b56613c25565b806308c379a01415612b905750612b6b613c41565b80612b765750612b92565b8060405162461bcd60e51b815260040161061c9190612fd8565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161061c565b6001600160e01b0319811663bc197c8160e01b14612c685760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161061c565b50505050505050565b600354610100900460ff16612c985760405162461bcd60e51b815260040161061c90613af5565b6001609c55565b600354610100900460ff16612cc65760405162461bcd60e51b815260040161061c90613af5565b61190133612587565b600354610100900460ff16612cf65760405162461bcd60e51b815260040161061c90613af5565b611f8c81612e41565b60008181526001830160205260408120548015612de8576000612d23600183613932565b8554909150600090612d3790600190613932565b9050818114612d9c576000866000018281548110612d5757612d5761386c565b9060005260206000200154905080876000018481548110612d7a57612d7a61386c565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612dad57612dad613cca565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061064a565b600091505061064a565b6000818152600183016020526040812054612e395750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561064a565b50600061064a565b8051611c8f90606a906020840190828054612e5b90613718565b90600052602060002090601f016020900481019282612e7d5760008555612ec3565b82601f10612e9657805160ff1916838001178555612ec3565b82800160010185558215612ec3579182015b82811115612ec3578251825591602001919060010190612ea8565b50612ecf929150612ed3565b5090565b5b80821115612ecf5760008155600101612ed4565b6001600160a01b0381168114611f8c57600080fd5b60008060408385031215612f1057600080fd5b8235612f1b81612ee8565b946020939093013593505050565b6001600160e01b031981168114611f8c57600080fd5b600060208284031215612f5157600080fd5b8135612f5c81612f29565b9392505050565b600060208284031215612f7557600080fd5b5035919050565b60005b83811015612f97578181015183820152602001612f7f565b83811115612fa6576000848401525b50505050565b60008151808452612fc4816020860160208601612f7c565b601f01601f19169290920160200192915050565b602081526000612f5c6020830184612fac565b60008083601f840112612ffd57600080fd5b5081356001600160401b0381111561301457600080fd5b60208301915083602082850101111561302c57600080fd5b9250929050565b60008060008060006080868803121561304b57600080fd5b853561305681612ee8565b9450602086013561306681612ee8565b93506040860135925060608601356001600160401b0381111561308857600080fd5b61309488828901612feb565b969995985093965092949392505050565b60008083601f8401126130b757600080fd5b5081356001600160401b038111156130ce57600080fd5b6020830191508360208260051b850101111561302c57600080fd5b600080600080604085870312156130ff57600080fd5b84356001600160401b038082111561311657600080fd5b613122888389016130a5565b9096509450602087013591508082111561313b57600080fd5b50613148878288016130a5565b95989497509550505050565b60008060008060008060008060a0898b03121561317057600080fd5b883561317b81612ee8565b9750602089013561318b81612ee8565b965060408901356001600160401b03808211156131a757600080fd5b6131b38c838d016130a5565b909850965060608b01359150808211156131cc57600080fd5b6131d88c838d016130a5565b909650945060808b01359150808211156131f157600080fd5b506131fe8b828c01612feb565b999c989b5096995094979396929594505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561324d5761324d613212565b6040525050565b60006001600160401b0382111561326d5761326d613212565b5060051b60200190565b600082601f83011261328857600080fd5b8135602061329582613254565b6040516132a28282613228565b83815260059390931b85018201928281019150868411156132c257600080fd5b8286015b848110156132dd57803583529183019183016132c6565b509695505050505050565b600080604083850312156132fb57600080fd5b82356001600160401b038082111561331257600080fd5b818501915085601f83011261332657600080fd5b8135602061333382613254565b6040516133408282613228565b83815260059390931b850182019282810191508984111561336057600080fd5b948201945b8386101561338757853561337881612ee8565b82529482019490820190613365565b9650508601359250508082111561339d57600080fd5b506133aa85828601613277565b9150509250929050565b600081518084526020808501945080840160005b838110156133e4578151875295820195908201906001016133c8565b509495945050505050565b602081526000612f5c60208301846133b4565b6000806000806060858703121561341857600080fd5b843561342381612ee8565b93506020850135925060408501356001600160401b0381111561344557600080fd5b61314887828801612feb565b60006020828403121561346357600080fd5b8135612f5c81612ee8565b6000806000806000806080878903121561348757600080fd5b863561349281612ee8565b955060208701356134a281612ee8565b945060408701356001600160401b03808211156134be57600080fd5b6134ca8a838b016130a5565b909650945060608901359150808211156134e357600080fd5b506134f089828a016130a5565b979a9699509497509295939492505050565b8015158114611f8c57600080fd5b6000806040838503121561352357600080fd5b823561352e81612ee8565b9150602083013561353e81613502565b809150509250929050565b600082601f83011261355a57600080fd5b81356001600160401b0381111561357357613573613212565b60405161358a601f8301601f191660200182613228565b81815284602083860101111561359f57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156135d457600080fd5b85356001600160401b038111156135ea57600080fd5b6135f688828901613549565b955050602086013561360781612ee8565b9350604086013561361781613502565b9250606086013561362781613502565b9150608086013561363781612ee8565b809150509295509295909350565b60006020828403121561365757600080fd5b81356001600160401b0381111561366d57600080fd5b61367984828501613549565b949350505050565b6000806040838503121561369457600080fd5b823561369f81612ee8565b9150602083013561353e81612ee8565b60008060008060008060a087890312156136c857600080fd5b86356136d381612ee8565b955060208701356136e381612ee8565b9450604087013593506060870135925060808701356001600160401b0381111561370c57600080fd5b6134f089828a01612feb565b600181811c9082168061372c57607f821691505b6020821081141561374d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526037908201527f434e46543a205468697320636f6e74726163742063616e206f6e6c792072656360408201527f656976652074686520756e6465726c79696e67204e4654000000000000000000606082015260800190565b60208082526030908201527f434e46543a204f6e6c792074686520434e465420636f6e74726163742063616e60408201526f103132903a34329037b832b930ba37b960811b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f434e46543a2069642f616d6f756e7473206c656e677468206d69736d61746368604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252602e908201527f434e46543a20416d6f756e7473206d75737420626520616c6c20317320666f7260408201526d103737b716a2a92198989a9ab99760911b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082198211156138f9576138f96138d0565b500190565b6000600019821415613912576139126138d0565b5060010190565b60006020828403121561392b57600080fd5b5051919050565b600082821015613944576139446138d0565b500390565b81835260006001600160fb1b0383111561396257600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b0387811682528616602082015260a0604082018190526000906139ac9083018688613949565b82810360608401526139bf818587613949565b8381036080909401939093525050600081526020019695505050505050565b600082516139f0818460208701612f7c565b9190910192915050565b6001600160a01b0386168152606060208201819052600090613a1f9083018688613949565b8281036040840152613a32818587613949565b98975050505050505050565b600060208284031215613a5057600080fd5b8151612f5c81612ee8565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b600060208284031215613aea57600080fd5b8151612f5c81613502565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b604081526000613b9b60408301856133b4565b8281036020840152613bad81856133b4565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090613be2908301866133b4565b8281036060840152613bf481866133b4565b90508281036080840152613a328185612fac565b600060208284031215613c1a57600080fd5b8151612f5c81612f29565b600060033d1115613c3e5760046000803e5060005160e01c5b90565b600060443d1015613c4f5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613c7e57505050505090565b8285019150815181811115613c965750505050505090565b843d8701016020828501011115613cb05750505050505090565b613cbf60208286010187613228565b509095945050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220b3391b78075adf696bbe34af5b2b7325388960469ca9262028833771963d2a4764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101b65760003560e01c80636f307dc3116100ec578063bc197c811161008a578063e985e9c511610064578063e985e9c51461050b578063f23a6e6114610554578063f242432a14610574578063f2fde38b1461059457600080fd5b8063bc197c81146104ab578063cce36ecd146104cb578063d71dfb99146104eb57600080fd5b80638da5cb5b116100c65780638da5cb5b146104385780639380920814610456578063a22cb46514610476578063aa80b6cc1461049657600080fd5b80636f307dc3146103e3578063715018a61461040357806385bff2e71461041857600080fd5b80632eb2c2d6116101595780635fe3b567116101335780635fe3b5671461034a5780636a11a3d8146103825780636dbf2fa0146103a35780636eacd398146103b657600080fd5b80632eb2c2d6146102dd5780633d5d190c146102fd5780634e1273f41461031d57600080fd5b80630e89341c116101955780630e89341c1461023f578063150b7a021461026c57806318160ddd146102a55780632ca51e22146102bb57600080fd5b8062fdd58e146101bb57806301ffc9a7146101ee57806306f26dc21461021e575b600080fd5b3480156101c757600080fd5b506101db6101d6366004612efd565b6105b4565b6040519081526020015b60405180910390f35b3480156101fa57600080fd5b5061020e610209366004612f3f565b610650565b60405190151581526020016101e5565b34801561022a57600080fd5b5060015461020e90600160a81b900460ff1681565b34801561024b57600080fd5b5061025f61025a366004612f63565b610690565b6040516101e59190612fd8565b34801561027857600080fd5b5061028c610287366004613033565b610724565b6040516001600160e01b031990911681526020016101e5565b3480156102b157600080fd5b506101db609a5481565b3480156102c757600080fd5b506102db6102d63660046130e9565b61078e565b005b3480156102e957600080fd5b506102db6102f8366004613154565b610d4c565b34801561030957600080fd5b506101db6103183660046130e9565b610fe4565b34801561032957600080fd5b5061033d6103383660046132e8565b611647565b6040516101e591906133ef565b34801561035657600080fd5b5060005461036a906001600160a01b031681565b6040516001600160a01b0390911681526020016101e5565b34801561038e57600080fd5b5060015461020e90600160a01b900460ff1681565b61020e6103b1366004613402565b611770565b3480156103c257600080fd5b506101db6103d1366004613451565b60026020526000908152604090205481565b3480156103ef57600080fd5b5060015461036a906001600160a01b031681565b34801561040f57600080fd5b506102db6118cd565b34801561042457600080fd5b5061033d610433366004613451565b611903565b34801561044457600080fd5b5060ce546001600160a01b031661036a565b34801561046257600080fd5b506102db61047136600461346e565b61196e565b34801561048257600080fd5b506102db610491366004613510565b611c84565b3480156104a257600080fd5b5061020e600181565b3480156104b757600080fd5b5061028c6104c6366004613154565b611c93565b3480156104d757600080fd5b506102db6104e63660046135bc565b611d00565b3480156104f757600080fd5b506102db610506366004613645565b611f5c565b34801561051757600080fd5b5061020e610526366004613681565b6001600160a01b03918216600090815260696020908152604080832093909416825291909152205460ff1690565b34801561056057600080fd5b5061028c61056f3660046136af565b611f8f565b34801561058057600080fd5b506102db61058f3660046136af565b611ffa565b3480156105a057600080fd5b506102db6105af366004613451565b612052565b60006001600160a01b0383166106255760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526068602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216630271189760e51b148061068157506001600160e01b03198216630a85bd0160e11b145b8061064a575061064a826120ea565b6060606a805461069f90613718565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb90613718565b80156107185780601f106106ed57610100808354040283529160200191610718565b820191906000526020600020905b8154815290600101906020018083116106fb57829003601f168201915b50505050509050919050565b60015460009086906001600160a01b031633146107535760405162461bcd60e51b815260040161061c90613753565b6001600160a01b038116301461077b5760405162461bcd60e51b815260040161061c906137b0565b50630a85bd0160e11b9695505050505050565b6002609c5414156107b15760405162461bcd60e51b815260040161061c90613800565b6002609c558281146107d55760405162461bcd60e51b815260040161061c90613837565b826000805b828110156108ea57600154600160a81b900460ff1661082b578484828181106108055761080561386c565b9050602002013560011461082b5760405162461bcd60e51b815260040161061c90613882565b84848281811061083d5761083d61386c565b905060200201358261084f91906138e6565b91508484828181106108635761086361386c565b9050602002013561088c338989858181106108805761088061386c565b905060200201356105b4565b10156108da5760405162461bcd60e51b815260206004820152601f60248201527f434e46543a204e6f7420656e6f756768204e46547320746f2072656465656d00604482015260640161061c565b6108e3816138fe565b90506107da565b506000805460405163eabe7d9160e01b8152306004820152336024820152604481018490526001600160a01b039091169063eabe7d9190606401602060405180830381600087803b15801561093e57600080fd5b505af1158015610952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109769190613919565b905080156109c65760405162461bcd60e51b815260206004820152601b60248201527f434e46543a2052656465656d206973206e6f7420616c6c6f7765640000000000604482015260640161061c565b33600090815260026020526040812080548492906109e5908490613932565b92505081905550610a5a3388888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525061213a92505050565b600154600160a81b900460ff1615610add57600154604051631759616b60e11b81526001600160a01b0390911690632eb2c2d690610aa690309033908c908c908c908c9060040161397f565b600060405180830381600087803b158015610ac057600080fd5b505af1158015610ad4573d6000803e3d6000fd5b50505050610cff565b600154600160a01b900460ff1615610c3f5760005b83811015610c3957600033898984818110610b0f57610b0f61386c565b6040516001600160a01b039094166024850152602002919091013560448301525060640160408051601f198184030181529181526020820180516001600160e01b03166322dca8bb60e21b17905260015490519192506000916001600160a01b0390911690610b7f9084906139de565b6000604051808303816000865af19150503d8060008114610bbc576040519150601f19603f3d011682016040523d82523d6000602084013e610bc1565b606091505b5050905080610c265760405162461bcd60e51b815260206004820152602b60248201527f434e46543a2043616c6c696e67207472616e7366657250756e6b20776173207560448201526a1b9cdd58d8d95cdcd99d5b60aa1b606482015260840161061c565b505080610c32906138fe565b9050610af2565b50610cff565b60005b83811015610cfd576001546001600160a01b031663b88d4fde30338b8b86818110610c6f57610c6f61386c565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152608060648201526000608482015260a401600060405180830381600087803b158015610cd457600080fd5b505af1158015610ce8573d6000803e3d6000fd5b5050505080610cf6906138fe565b9050610c42565b505b7fd63285f33fab7fc260b1b9e7ce1abbf3fc8906df5a271e6ebd3062bdca7bb29e3388888888604051610d369594939291906139fa565b60405180910390a150506001609c555050505050565b6002609c541415610d6f5760405162461bcd60e51b815260040161061c90613800565b6002609c55604080518082019091526000602082018190528682525b8151811015610dd157858582818110610da657610da661386c565b9050602002013582602001818151610dbe91906138e6565b905250610dca816138fe565b9050610d8b565b506000805460208301516040516317b9b84b60e31b81523060048201526001600160a01b038d811660248301528c81166044830152606482019290925291169063bdcdc25890608401602060405180830381600087803b158015610e3457600080fd5b505af1158015610e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6c9190613919565b90508015610ebc5760405162461bcd60e51b815260206004820152601b60248201527f434e46543a2052656465656d206973206e6f7420616c6c6f7765640000000000604482015260640161061c565b8160200151600260008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610ef591906138e6565b90915550506020808301516001600160a01b038c166000908152600290925260408220805491929091610f29908490613932565b92505081905550610fd38a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c91829185019084908082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a908190840183828082843760009201919091525061234392505050565b50506001609c555050505050505050565b60006002609c5414156110095760405162461bcd60e51b815260040161061c90613800565b6002609c5583821461102d5760405162461bcd60e51b815260040161061c90613837565b60008054604051634ef4c3e160e01b8152306004820152336024820152604481018390526001600160a01b0390911690634ef4c3e190606401602060405180830381600087803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b89190613919565b905080156111085760405162461bcd60e51b815260206004820152601960248201527f434e46543a204d696e74206973206e6f7420616c6c6f77656400000000000000604482015260640161061c565b846000805b8281101561119457600154600160a81b900460ff1661115e578686828181106111385761113861386c565b9050602002013560011461115e5760405162461bcd60e51b815260040161061c90613882565b8686828181106111705761117061386c565b905060200201358261118291906138e6565b915061118d816138fe565b905061110d565b5033600090815260026020526040812080548392906111b49084906138e6565b9091555050600154600160a81b900460ff161561123c57600154604051631759616b60e11b81526001600160a01b0390911690632eb2c2d69061120590339030908d908d908d908d9060040161397f565b600060405180830381600087803b15801561121f57600080fd5b505af1158015611233573d6000803e3d6000fd5b5050505061157c565b600154600160a01b900460ff16156114bc5760005b828110156114b657600089898381811061126d5761126d61386c565b9050602002013560405160240161128691815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316630b02f02d60e31b179052600154905191925060009182916001600160a01b0316906112d29085906139de565b600060405180830381855afa9150503d806000811461130d576040519150601f19603f3d011682016040523d82523d6000602084013e611312565b606091505b509150915060008180602001905181019061132d9190613a3e565b905082801561134457506001600160a01b03811633145b6113845760405162461bcd60e51b81526020600482015260116024820152702737ba103a34329027232a1037bbb732b960791b604482015260640161061c565b60008d8d878181106113985761139861386c565b905060200201356040516024016113b191815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663104c9fd360e31b17905260015490519192506000916001600160a01b03909116906113fd9084906139de565b6000604051808303816000865af19150503d806000811461143a576040519150601f19603f3d011682016040523d82523d6000602084013e61143f565b606091505b505090508061149f5760405162461bcd60e51b815260206004820152602660248201527f434e46543a2043616c6c696e672062757950756e6b2077617320756e73756363604482015265195cdcd99d5b60d21b606482015260840161061c565b505050505050806114af906138fe565b9050611251565b5061157c565b60005b8281101561157a576001546001600160a01b031663b88d4fde33308c8c868181106114ec576114ec61386c565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152608060648201526000608482015260a401600060405180830381600087803b15801561155157600080fd5b505af1158015611565573d6000803e3d6000fd5b5050505080611573906138fe565b90506114bf565b505b6115f83389898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920182905250604080516020810190915290815292506123da915050565b7f0329a7c1652297b926cc497fd75d078847dbaa7a5a782d651dba3fdf3e8b38da338989898960405161162f9594939291906139fa565b60405180910390a1506001609c559695505050505050565b606081518351146116ac5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161061c565b600083516001600160401b038111156116c7576116c7613212565b6040519080825280602002602001820160405280156116f0578160200160208202803683370190505b50905060005b84518110156117685761173b8582815181106117145761171461386c565b602002602001015185838151811061172e5761172e61386c565b60200260200101516105b4565b82828151811061174d5761174d61386c565b6020908102919091010152611761816138fe565b90506116f6565b509392505050565b60006002609c5414156117955760405162461bcd60e51b815260040161061c90613800565b6002609c5560ce546001600160a01b031633146117c45760405162461bcd60e51b815260040161061c90613a5b565b6001546001600160a01b03868116911614156118405760405162461bcd60e51b815260206004820152603560248201527f434e46543a2043616e6e6f74206d616b6520616e206172626974726172792063604482015274185b1b081d1bc81d5b99195c9b1e5a5b99c8139195605a1b606482015260840161061c565b611881858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505a61256f565b90507f58920bab8ebe20f458895b68243189a021c51741421c3d98eff715b8e5afe1fa858585856040516118b89493929190613a90565b60405180910390a16001609c55949350505050565b60ce546001600160a01b031633146118f75760405162461bcd60e51b815260040161061c90613a5b565b6119016000612587565b565b6001600160a01b0381166000908152609b602090815260409182902080548351818402810184019094528084526060939283018282801561071857602002820191906000526020600020905b81548152602001906001019080831161194f5750505050509050919050565b6002609c5414156119915760405162461bcd60e51b815260040161061c90613800565b6002609c558281146119b55760405162461bcd60e51b815260040161061c90613837565b6000805460405163d02f735160e01b81523060048201523360248201526001600160a01b0389811660448301528881166064830152608482018490529091169063d02f73519060a401602060405180830381600087803b158015611a1857600080fd5b505af1158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a509190613919565b90508015611aa05760405162461bcd60e51b815260206004820152601a60248201527f434e46543a205365697a65206973206e6f7420616c6c6f776564000000000000604482015260640161061c565b866001600160a01b0316866001600160a01b03161415611b0e5760405162461bcd60e51b815260206004820152602360248201527f434e46543a204c697175696461746f722063616e6e6f7420626520626f72726f6044820152623bb2b960e91b606482015260840161061c565b836000805b82811015611b9a57600154600160a81b900460ff16611b6457858582818110611b3e57611b3e61386c565b90506020020135600114611b645760405162461bcd60e51b815260040161061c90613882565b858582818110611b7657611b7661386c565b9050602002013582611b8891906138e6565b9150611b93816138fe565b9050611b13565b506001600160a01b03891660009081526002602052604081208054839290611bc39084906138e6565b90915550506001600160a01b03881660009081526002602052604081208054839290611bf0908490613932565b92505081905550611c74888a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920182905250604080516020810190915290815292506125d9915050565b50506001609c5550505050505050565b611c8f3383836127ff565b5050565b60015460009089906001600160a01b03163314611cc25760405162461bcd60e51b815260040161061c90613753565b6001600160a01b0381163014611cea5760405162461bcd60e51b815260040161061c906137b0565b5063bc197c8160e01b9998505050505050505050565b600354610100900460ff16611d1b5760035460ff1615611d1f565b303b155b611d825760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161061c565b600354610100900460ff16158015611da4576003805461ffff19166101011790555b6001600160a01b038516611e065760405162461bcd60e51b8152602060048201526024808201527f434e46543a2041737365742073686f756c64206e6f74206265206164647265736044820152637328302960e01b606482015260840161061c565b816001600160a01b0316627e3dd26040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3e57600080fd5b505afa158015611e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e769190613ad8565b611ed55760405162461bcd60e51b815260206004820152602a60248201527f5f636f6d7074726f6c6c6572206973206e6f74206120436f6d7074726f6c6c656044820152691c8818dbdb9d1c9858dd60b21b606482015260840161061c565b611ede86611f5c565b611ee66128e0565b611eee61290f565b600180546001600160a01b038781166001600160a81b031990921691909117600160a01b871515021760ff60a81b1916600160a81b8615150217909155600080546001600160a01b0319169184169190911790558015611f54576003805461ff00191690555b505050505050565b600354610100900460ff16611f835760405162461bcd60e51b815260040161061c90613af5565b611f8c8161293e565b50565b60015460009087906001600160a01b03163314611fbe5760405162461bcd60e51b815260040161061c90613753565b6001600160a01b0381163014611fe65760405162461bcd60e51b815260040161061c906137b0565b5063f23a6e6160e01b979650505050505050565b60405162461bcd60e51b815260206004820152602760248201527f434e46543a20557365207361666542617463685472616e7366657246726f6d206044820152661a5b9cdd19585960ca1b606482015260840161061c565b60ce546001600160a01b0316331461207c5760405162461bcd60e51b815260040161061c90613a5b565b6001600160a01b0381166120e15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161061c565b611f8c81612587565b60006001600160e01b03198216636cdb3d1360e11b148061211b57506001600160e01b031982166303a24d0760e21b145b8061064a57506301ffc9a760e01b6001600160e01b031983161461064a565b6001600160a01b03831661219c5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161061c565b80518251146121bd5760405162461bcd60e51b815260040161061c90613b40565b60003390506121e08185600086866040518060200160405280600081525061296e565b60005b83518110156122e45760008482815181106122005761220061386c565b60200260200101519050600084838151811061221e5761221e61386c565b60209081029190910181015160008481526068835260408082206001600160a01b038c1683529093529190912054909150818110156122ab5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161061c565b60009283526068602090815260408085206001600160a01b038b16865290915290922091039055806122dc816138fe565b9150506121e3565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612335929190613b88565b60405180910390a450505050565b6001600160a01b03851633148061235f575061235f8533610526565b6123c65760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161061c565b6123d385858585856125d9565b5050505050565b6001600160a01b03841661243a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161061c565b815183511461245b5760405162461bcd60e51b815260040161061c90613b40565b3361246b8160008787878761296e565b60005b8451811015612507578381815181106124895761248961386c565b6020026020010151606860008784815181106124a7576124a761386c565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546124ef91906138e6565b909155508190506124ff816138fe565b91505061246e565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612558929190613b88565b60405180910390a46123d381600087878787612abc565b6000806000845160208601878987f195945050505050565b60ce80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b81518351146125fa5760405162461bcd60e51b815260040161061c90613b40565b6001600160a01b03841661265e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161061c565b3361266d81878787878761296e565b60005b845181101561279957600085828151811061268d5761268d61386c565b6020026020010151905060008583815181106126ab576126ab61386c565b60209081029190910181015160008481526068835260408082206001600160a01b038e16835290935291909120549091508181101561273f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161061c565b60008381526068602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061277e9084906138e6565b9250508190555050505080612792906138fe565b9050612670565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516127e9929190613b88565b60405180910390a4611f54818787878787612abc565b816001600160a01b0316836001600160a01b031614156128735760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161061c565b6001600160a01b03838116600081815260696020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600354610100900460ff166129075760405162461bcd60e51b815260040161061c90613af5565b611901612c71565b600354610100900460ff166129365760405162461bcd60e51b815260040161061c90613af5565b611901612c9f565b600354610100900460ff166129655760405162461bcd60e51b815260040161061c90613af5565b611f8c81612ccf565b836001600160a01b0316856001600160a01b0316141561298d57611f54565b6001600160a01b038086166000908152609b602052604080822092871682528120905b8551811015612ab15760008582815181106129cd576129cd61386c565b6020026020010151905080600014156129e65750612aa1565b60008783815181106129fa576129fa61386c565b6020026020010151905060006001600160a01b03168a6001600160a01b03161415612a3c5781609a6000828254612a3191906138e6565b90915550612a599050565b81612a478b836105b4565b1415612a5957612a578582612cff565b505b6001600160a01b038916612a845781609a6000828254612a799190613932565b90915550612a9e9050565b612a8e89826105b4565b612a9e57612a9c8482612df2565b505b50505b612aaa816138fe565b90506129b0565b505050505050505050565b6001600160a01b0384163b15611f545760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612b009089908990889088908890600401613bb6565b602060405180830381600087803b158015612b1a57600080fd5b505af1925050508015612b4a575060408051601f3d908101601f19168201909252612b4791810190613c08565b60015b612bf757612b56613c25565b806308c379a01415612b905750612b6b613c41565b80612b765750612b92565b8060405162461bcd60e51b815260040161061c9190612fd8565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161061c565b6001600160e01b0319811663bc197c8160e01b14612c685760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161061c565b50505050505050565b600354610100900460ff16612c985760405162461bcd60e51b815260040161061c90613af5565b6001609c55565b600354610100900460ff16612cc65760405162461bcd60e51b815260040161061c90613af5565b61190133612587565b600354610100900460ff16612cf65760405162461bcd60e51b815260040161061c90613af5565b611f8c81612e41565b60008181526001830160205260408120548015612de8576000612d23600183613932565b8554909150600090612d3790600190613932565b9050818114612d9c576000866000018281548110612d5757612d5761386c565b9060005260206000200154905080876000018481548110612d7a57612d7a61386c565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612dad57612dad613cca565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061064a565b600091505061064a565b6000818152600183016020526040812054612e395750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561064a565b50600061064a565b8051611c8f90606a906020840190828054612e5b90613718565b90600052602060002090601f016020900481019282612e7d5760008555612ec3565b82601f10612e9657805160ff1916838001178555612ec3565b82800160010185558215612ec3579182015b82811115612ec3578251825591602001919060010190612ea8565b50612ecf929150612ed3565b5090565b5b80821115612ecf5760008155600101612ed4565b6001600160a01b0381168114611f8c57600080fd5b60008060408385031215612f1057600080fd5b8235612f1b81612ee8565b946020939093013593505050565b6001600160e01b031981168114611f8c57600080fd5b600060208284031215612f5157600080fd5b8135612f5c81612f29565b9392505050565b600060208284031215612f7557600080fd5b5035919050565b60005b83811015612f97578181015183820152602001612f7f565b83811115612fa6576000848401525b50505050565b60008151808452612fc4816020860160208601612f7c565b601f01601f19169290920160200192915050565b602081526000612f5c6020830184612fac565b60008083601f840112612ffd57600080fd5b5081356001600160401b0381111561301457600080fd5b60208301915083602082850101111561302c57600080fd5b9250929050565b60008060008060006080868803121561304b57600080fd5b853561305681612ee8565b9450602086013561306681612ee8565b93506040860135925060608601356001600160401b0381111561308857600080fd5b61309488828901612feb565b969995985093965092949392505050565b60008083601f8401126130b757600080fd5b5081356001600160401b038111156130ce57600080fd5b6020830191508360208260051b850101111561302c57600080fd5b600080600080604085870312156130ff57600080fd5b84356001600160401b038082111561311657600080fd5b613122888389016130a5565b9096509450602087013591508082111561313b57600080fd5b50613148878288016130a5565b95989497509550505050565b60008060008060008060008060a0898b03121561317057600080fd5b883561317b81612ee8565b9750602089013561318b81612ee8565b965060408901356001600160401b03808211156131a757600080fd5b6131b38c838d016130a5565b909850965060608b01359150808211156131cc57600080fd5b6131d88c838d016130a5565b909650945060808b01359150808211156131f157600080fd5b506131fe8b828c01612feb565b999c989b5096995094979396929594505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561324d5761324d613212565b6040525050565b60006001600160401b0382111561326d5761326d613212565b5060051b60200190565b600082601f83011261328857600080fd5b8135602061329582613254565b6040516132a28282613228565b83815260059390931b85018201928281019150868411156132c257600080fd5b8286015b848110156132dd57803583529183019183016132c6565b509695505050505050565b600080604083850312156132fb57600080fd5b82356001600160401b038082111561331257600080fd5b818501915085601f83011261332657600080fd5b8135602061333382613254565b6040516133408282613228565b83815260059390931b850182019282810191508984111561336057600080fd5b948201945b8386101561338757853561337881612ee8565b82529482019490820190613365565b9650508601359250508082111561339d57600080fd5b506133aa85828601613277565b9150509250929050565b600081518084526020808501945080840160005b838110156133e4578151875295820195908201906001016133c8565b509495945050505050565b602081526000612f5c60208301846133b4565b6000806000806060858703121561341857600080fd5b843561342381612ee8565b93506020850135925060408501356001600160401b0381111561344557600080fd5b61314887828801612feb565b60006020828403121561346357600080fd5b8135612f5c81612ee8565b6000806000806000806080878903121561348757600080fd5b863561349281612ee8565b955060208701356134a281612ee8565b945060408701356001600160401b03808211156134be57600080fd5b6134ca8a838b016130a5565b909650945060608901359150808211156134e357600080fd5b506134f089828a016130a5565b979a9699509497509295939492505050565b8015158114611f8c57600080fd5b6000806040838503121561352357600080fd5b823561352e81612ee8565b9150602083013561353e81613502565b809150509250929050565b600082601f83011261355a57600080fd5b81356001600160401b0381111561357357613573613212565b60405161358a601f8301601f191660200182613228565b81815284602083860101111561359f57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156135d457600080fd5b85356001600160401b038111156135ea57600080fd5b6135f688828901613549565b955050602086013561360781612ee8565b9350604086013561361781613502565b9250606086013561362781613502565b9150608086013561363781612ee8565b809150509295509295909350565b60006020828403121561365757600080fd5b81356001600160401b0381111561366d57600080fd5b61367984828501613549565b949350505050565b6000806040838503121561369457600080fd5b823561369f81612ee8565b9150602083013561353e81612ee8565b60008060008060008060a087890312156136c857600080fd5b86356136d381612ee8565b955060208701356136e381612ee8565b9450604087013593506060870135925060808701356001600160401b0381111561370c57600080fd5b6134f089828a01612feb565b600181811c9082168061372c57607f821691505b6020821081141561374d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526037908201527f434e46543a205468697320636f6e74726163742063616e206f6e6c792072656360408201527f656976652074686520756e6465726c79696e67204e4654000000000000000000606082015260800190565b60208082526030908201527f434e46543a204f6e6c792074686520434e465420636f6e74726163742063616e60408201526f103132903a34329037b832b930ba37b960811b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f434e46543a2069642f616d6f756e7473206c656e677468206d69736d61746368604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252602e908201527f434e46543a20416d6f756e7473206d75737420626520616c6c20317320666f7260408201526d103737b716a2a92198989a9ab99760911b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082198211156138f9576138f96138d0565b500190565b6000600019821415613912576139126138d0565b5060010190565b60006020828403121561392b57600080fd5b5051919050565b600082821015613944576139446138d0565b500390565b81835260006001600160fb1b0383111561396257600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b0387811682528616602082015260a0604082018190526000906139ac9083018688613949565b82810360608401526139bf818587613949565b8381036080909401939093525050600081526020019695505050505050565b600082516139f0818460208701612f7c565b9190910192915050565b6001600160a01b0386168152606060208201819052600090613a1f9083018688613949565b8281036040840152613a32818587613949565b98975050505050505050565b600060208284031215613a5057600080fd5b8151612f5c81612ee8565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b600060208284031215613aea57600080fd5b8151612f5c81613502565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b604081526000613b9b60408301856133b4565b8281036020840152613bad81856133b4565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090613be2908301866133b4565b8281036060840152613bf481866133b4565b90508281036080840152613a328185612fac565b600060208284031215613c1a57600080fd5b8151612f5c81612f29565b600060033d1115613c3e5760046000803e5060005160e01c5b90565b600060443d1015613c4f5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613c7e57505050505090565b8285019150815181811115613c965750505050505090565b843d8701016020828501011115613cb05750505050505090565b613cbf60208286010187613228565b509095945050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220b3391b78075adf696bbe34af5b2b7325388960469ca9262028833771963d2a4764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "call(address,uint256,bytes)": {
        "params": {
          "data": "Encoded data to send",
          "to": "Contract address to call",
          "value": "ETH value to send, if any"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "ids": "An array containing ids of each token being transferred (order and length must match values array)",
          "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
          "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "id": "The ID of the token being transferred",
          "operator": "The address which initiated the transfer (i.e. msg.sender)",
          "value": "The amount of tokens being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "tokensByAccount(address)": {
        "details": "Returns a list of token IDs held by `account`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Call(address,uint256,bytes)": {
        "notice": "Event emitted when arbitrary contract is called"
      },
      "Mint(address,uint256[],uint256[])": {
        "notice": "Event emitted when cNFTs are minted"
      },
      "Redeem(address,uint256[],uint256[])": {
        "notice": "Event emitted when tokens are redeemed"
      }
    },
    "kind": "user",
    "methods": {
      "call(address,uint256,bytes)": {
        "notice": "Allows the admin to call arbitrary contracts, as long as the underlying balance is unchanged.This allows the admin to retrieve and distribute NFT airdrops that would otherwise be locked up in this contract."
      },
      "comptroller()": {
        "notice": "The address of the CNft's Comptroller."
      },
      "is1155()": {
        "notice": "Whether `underlying` represents an ERC-1155."
      },
      "isCNft()": {
        "notice": "Indicator that this is a CNft contract (for inspection)"
      },
      "isPunk()": {
        "notice": "Whether `underlying` represents a CryptoPunk."
      },
      "mint(uint256[],uint256[])": {
        "notice": "If underlying is not ERC1155, amounts must be all 1s."
      },
      "redeem(uint256[],uint256[])": {
        "notice": "If underlying is not ERC1155, amounts must be all 1s."
      },
      "totalBalance(address)": {
        "notice": "Mapping from user to number of tokens."
      },
      "underlying()": {
        "notice": "The underlying NFT contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6388,
        "contract": "contracts/CNft.sol:CNft",
        "label": "comptroller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6391,
        "contract": "contracts/CNft.sol:CNft",
        "label": "underlying",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6394,
        "contract": "contracts/CNft.sol:CNft",
        "label": "isPunk",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6397,
        "contract": "contracts/CNft.sol:CNft",
        "label": "is1155",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6402,
        "contract": "contracts/CNft.sol:CNft",
        "label": "totalBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 130,
        "contract": "contracts/CNft.sol:CNft",
        "label": "_initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/CNft.sol:CNft",
        "label": "_initializing",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1836,
        "contract": "contracts/CNft.sol:CNft",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1880,
        "contract": "contracts/CNft.sol:CNft",
        "label": "__gap",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 285,
        "contract": "contracts/CNft.sol:CNft",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 291,
        "contract": "contracts/CNft.sol:CNft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 293,
        "contract": "contracts/CNft.sol:CNft",
        "label": "_uri",
        "offset": 0,
        "slot": "106",
        "type": "t_string_storage"
      },
      {
        "astId": 1373,
        "contract": "contracts/CNft.sol:CNft",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 6584,
        "contract": "contracts/CNft.sol:CNft",
        "label": "totalSupply",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 6589,
        "contract": "contracts/CNft.sol:CNft",
        "label": "_tokensByAccount",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_struct(UintSet)6763_storage)"
      },
      {
        "astId": 211,
        "contract": "contracts/CNft.sol:CNft",
        "label": "_status",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/CNft.sol:CNft",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/CNft.sol:CNft",
        "label": "_owner",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/CNft.sol:CNft",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)6763_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)6763_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)6763_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 6758,
            "contract": "contracts/CNft.sol:CNft",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 6762,
            "contract": "contracts/CNft.sol:CNft",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}